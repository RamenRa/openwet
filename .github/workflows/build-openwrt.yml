#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: sunxi.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        # sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E bash -c 'bash <(curl -s -qq https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch --filter=blob:none $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds and modify Makefile
      run: |
          # 更新 OpenWRT 的所有 feeds
          cd openwrt && ./scripts/feeds update -a && rm -rf feeds/luci/applications/luci-app-mosdns
          
          # 删除不需要的包
          rm -rf feeds/packages/net/{alist,adguardhome,mosdns,xray*,v2ray*,sing*,smartdns}
          rm -rf feeds/packages/utils/v2dat
          rm -rf feeds/packages/lang/golang
      
          # 克隆 golang 包
          git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
      
          # 将新的 Makefile 内容覆盖写入 feeds/small/v2ray-geodata/Makefile
          echo "# SPDX-License-Identifier: GPL-3.0-only
          #
          # Copyright (C) 2021-2022 ImmortalWrt.org
          
          include \$(TOPDIR)/rules.mk
      
          PKG_NAME:=v2ray-geodata
          PKG_RELEASE:=1
          
          PKG_LICENSE_FILES:=LICENSE
          PKG_MAINTAINER:=Tianling Shen <cnsztl@immortalwrt.org>
          
          include \$(INCLUDE_DIR)/package.mk
          
          GEOIP_FILE:=geoip.dat
          define Download/geoip
            URL:=https://github.com/v2fly/geoip/releases/latest/download/
            URL_FILE:=geoip.dat
            FILE:=\$(GEOIP_FILE)
            HASH:=0b92efbe8e6a8255d3142751964931d2ca4801b51f0cd12c05963e23e0062a52
          endef
          
          GEOSITE_FILE:=dlc.dat
          define Download/geosite
            URL:=https://github.com/v2fly/domain-list-community/releases/latest/download/
            URL_FILE:=dlc.dat
            FILE:=\$(GEOSITE_FILE)
            HASH:=f04433837b88a3f49d7cd6517c91e8f5de4e4496f3d88ef3b7c6be5bb63f4c6f
          endef
          
          GEOSITE_IRAN_FILE:=iran.dat
          define Download/geosite-ir
            URL:=https://github.com/bootmortis/iran-hosted-domains/releases/latest/download/
            URL_FILE:=iran.dat
            FILE:=\$(GEOSITE_IRAN_FILE)
            HASH:=c7db5e593e8d31b6f5b33ff4b7fad2030e24c7b87f13a2443b1fd0f71d351813
          endef
          
          define Package/v2ray-geodata/template
            SECTION:=net
            CATEGORY:=Network
            SUBMENU:=IP Addresses and Names
            URL:=https://www.v2fly.org
            PKGARCH:=all
          endef
          
          define Package/v2ray-geoip
            \$(call Package/v2ray-geodata/template)
            TITLE:=GeoIP List for V2Ray
            LICENSE:=CC-BY-SA-4.0
          endef
          
          define Package/v2ray-geosite
            \$(call Package/v2ray-geodata/template)
            TITLE:=Geosite List for V2Ray
            LICENSE:=MIT
          endef
          
          define Package/v2ray-geosite-ir
            \$(call Package/v2ray-geodata/template)
            TITLE:=Iran Geosite List for V2Ray
            PROVIDES:=xray-geosite-ir
            LICENSE:=MIT
          endef
          
          define Build/Prepare
          	\$(call Build/Prepare/Default)
          ifneq (\$(CONFIG_PACKAGE_v2ray-geoip),)
          	\$(call Download,geoip)
          endif
          ifneq (\$(CONFIG_PACKAGE_v2ray-geosite),)
          	\$(call Download,geosite)
          endif
          ifneq (\$(CONFIG_PACKAGE_v2ray-geosite-ir),)
          	\$(call Download,geosite-ir)
          endif
          endef
          
          define Build/Compile
          endef
          
          define Package/v2ray-geoip/install
          	\$(INSTALL_DIR) \$(1)/usr/share/v2ray
          	\$(INSTALL_DATA) \$(DL_DIR)/\$(GEOIP_FILE) \$(1)/usr/share/v2ray/geoip.dat
          endef
          
          define Package/v2ray-geosite/install
          	\$(INSTALL_DIR) \$(1)/usr/share/v2ray
          	\$(INSTALL_DATA) \$(DL_DIR)/\$(GEOSITE_FILE) \$(1)/usr/share/v2ray/geosite.dat
          endef
          
          define Package/v2ray-geosite-ir/install
          	\$(INSTALL_DIR) \$(1)/usr/share/v2ray \$(1)/usr/share/xray
          	\$(INSTALL_DATA) \$(DL_DIR)/\$(GEOSITE_IRAN_FILE) \$(1)/usr/share/v2ray/iran.dat
          	\$(LN) ../v2ray/iran.dat \$(1)/usr/share/xray/iran.dat
          endef
          
          \$(eval \$(call BuildPackage,v2ray-geoip))
          \$(eval \$(call BuildPackage,v2ray-geosite))
          \$(eval \$(call BuildPackage,v2ray-geosite-ir))
          " > openwrt/feeds/small/v2ray-geodata/Makefile


    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
